name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: showstock_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and run tests
      run: |
        set -e  # Exit immediately if a command exits with a non-zero status
        
        echo "Building test Docker image..."
        docker build -f docker/Dockerfile.tests -t showstock-tests .
        
        echo "Running tests and generating coverage report..."
        docker run --name test-container --network host \
          -e DATABASE_URL=postgresql://postgres:postgres@localhost:5432/showstock_test \
          -e PYTHONPATH=/app \
          -e PYTHONUNBUFFERED=1 \
          showstock-tests \
          pytest --cov=showstock --cov-report=term --cov-report=xml:/app/coverage.xml
        
        echo "Copying coverage.xml from container to host..."
        if docker cp test-container:/app/coverage.xml ./coverage.xml; then
          echo "Successfully copied coverage.xml from /app/coverage.xml"
        elif docker cp test-container:/app/coverage/coverage.xml ./coverage.xml; then
          echo "Successfully copied coverage.xml from /app/coverage/coverage.xml"
        elif docker cp test-container:/coverage.xml ./coverage.xml; then
          echo "Successfully copied coverage.xml from /coverage.xml"
        else
          echo "Searching for coverage.xml in container..."
          docker exec test-container find / -name coverage.xml
          echo "WARNING: Could not find coverage.xml in expected locations"
          # Create an empty coverage file to prevent the workflow from failing
          echo '<?xml version="1.0" ?><coverage version="1.0"></coverage>' > ./coverage.xml
        fi
        
        echo "Verifying coverage.xml exists..."
        ls -la ./coverage.xml
        
        echo "Cleaning up container..."
        docker rm test-container

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false
